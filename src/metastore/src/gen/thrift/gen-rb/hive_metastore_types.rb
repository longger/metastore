#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'fb303_types'


module HiveObjectType
  GLOBAL = 1
  DATABASE = 2
  TABLE = 3
  PARTITION = 4
  COLUMN = 5
  SCHEMA = 6
  VALUE_MAP = {1 => "GLOBAL", 2 => "DATABASE", 3 => "TABLE", 4 => "PARTITION", 5 => "COLUMN", 6 => "SCHEMA"}
  VALID_VALUES = Set.new([GLOBAL, DATABASE, TABLE, PARTITION, COLUMN, SCHEMA]).freeze
end

module PrincipalType
  USER = 1
  ROLE = 2
  GROUP = 3
  VALUE_MAP = {1 => "USER", 2 => "ROLE", 3 => "GROUP"}
  VALID_VALUES = Set.new([USER, ROLE, GROUP]).freeze
end

module PartitionEventType
  LOAD_DONE = 1
  VALUE_MAP = {1 => "LOAD_DONE"}
  VALID_VALUES = Set.new([LOAD_DONE]).freeze
end

module FOFailReason
  INVALID_NODE = 1
  INVALID_TABLE = 2
  INVALID_FILE = 3
  INVALID_SPLIT_VALUES = 4
  INVALID_ATTRIBUTION = 5
  INVALID_NODE_GROUPS = 6
  NOSPACE = 10
  NOTEXIST = 11
  SAFEMODE = 12
  INVALID_STATE = 13
  TRY_AGAIN = 14
  VALUE_MAP = {1 => "INVALID_NODE", 2 => "INVALID_TABLE", 3 => "INVALID_FILE", 4 => "INVALID_SPLIT_VALUES", 5 => "INVALID_ATTRIBUTION", 6 => "INVALID_NODE_GROUPS", 10 => "NOSPACE", 11 => "NOTEXIST", 12 => "SAFEMODE", 13 => "INVALID_STATE", 14 => "TRY_AGAIN"}
  VALID_VALUES = Set.new([INVALID_NODE, INVALID_TABLE, INVALID_FILE, INVALID_SPLIT_VALUES, INVALID_ATTRIBUTION, INVALID_NODE_GROUPS, NOSPACE, NOTEXIST, SAFEMODE, INVALID_STATE, TRY_AGAIN]).freeze
end

module FindNodePolicy
  ALL_NGS = 1
  SINGLE_NG = 2
  VALUE_MAP = {1 => "ALL_NGS", 2 => "SINGLE_NG"}
  VALID_VALUES = Set.new([ALL_NGS, SINGLE_NG]).freeze
end

module MSOperation
  EXPLAIN = 1
  CREATEDATABASE = 2
  DROPDATABASE = 3
  DROPTABLE = 4
  DESCTABLE = 5
  ALTERTABLE_RENAME = 6
  ALTERTABLE_RENAMECOL = 7
  ALTERTABLE_ADDPARTS = 8
  ALTERTABLE_DROPPARTS = 9
  ALTERTABLE_ADDCOLS = 10
  ALTERTABLE_REPLACECOLS = 11
  ALTERTABLE_RENAMEPART = 12
  ALTERTABLE_PROPERTIES = 13
  SHOWDATABASES = 14
  SHOWTABLES = 15
  SHOWCOLUMNS = 16
  SHOW_TABLESTATUS = 17
  SHOW_TBLPROPERTIES = 18
  SHOW_CREATETABLE = 19
  SHOWINDEXES = 20
  SHOWPARTITIONS = 21
  CREATEVIEW = 22
  DROPVIEW = 23
  CREATEINDEX = 24
  DROPINDEX = 25
  ALTERINDEX_REBUILD = 26
  ALTERVIEW_PROPERTIES = 27
  CREATEUSER = 28
  DROPUSER = 29
  CHANGE_PWD = 30
  AUTHENTICATION = 31
  SHOW_USERNAMES = 32
  CREATEROLE = 33
  DROPROLE = 34
  GRANT_PRIVILEGE = 35
  REVOKE_PRIVILEGE = 36
  SHOW_GRANT = 37
  GRANT_ROLE = 38
  REVOKE_ROLE = 39
  SHOW_ROLE_GRANT = 40
  CREATETABLE = 41
  QUERY = 42
  ALTERINDEX_PROPS = 43
  ALTERDATABASE = 44
  DESCDATABASE = 45
  ALTERTABLE_DROP_PROPERTIES = 46
  VALUE_MAP = {1 => "EXPLAIN", 2 => "CREATEDATABASE", 3 => "DROPDATABASE", 4 => "DROPTABLE", 5 => "DESCTABLE", 6 => "ALTERTABLE_RENAME", 7 => "ALTERTABLE_RENAMECOL", 8 => "ALTERTABLE_ADDPARTS", 9 => "ALTERTABLE_DROPPARTS", 10 => "ALTERTABLE_ADDCOLS", 11 => "ALTERTABLE_REPLACECOLS", 12 => "ALTERTABLE_RENAMEPART", 13 => "ALTERTABLE_PROPERTIES", 14 => "SHOWDATABASES", 15 => "SHOWTABLES", 16 => "SHOWCOLUMNS", 17 => "SHOW_TABLESTATUS", 18 => "SHOW_TBLPROPERTIES", 19 => "SHOW_CREATETABLE", 20 => "SHOWINDEXES", 21 => "SHOWPARTITIONS", 22 => "CREATEVIEW", 23 => "DROPVIEW", 24 => "CREATEINDEX", 25 => "DROPINDEX", 26 => "ALTERINDEX_REBUILD", 27 => "ALTERVIEW_PROPERTIES", 28 => "CREATEUSER", 29 => "DROPUSER", 30 => "CHANGE_PWD", 31 => "AUTHENTICATION", 32 => "SHOW_USERNAMES", 33 => "CREATEROLE", 34 => "DROPROLE", 35 => "GRANT_PRIVILEGE", 36 => "REVOKE_PRIVILEGE", 37 => "SHOW_GRANT", 38 => "GRANT_ROLE", 39 => "REVOKE_ROLE", 40 => "SHOW_ROLE_GRANT", 41 => "CREATETABLE", 42 => "QUERY", 43 => "ALTERINDEX_PROPS", 44 => "ALTERDATABASE", 45 => "DESCDATABASE", 46 => "ALTERTABLE_DROP_PROPERTIES"}
  VALID_VALUES = Set.new([EXPLAIN, CREATEDATABASE, DROPDATABASE, DROPTABLE, DESCTABLE, ALTERTABLE_RENAME, ALTERTABLE_RENAMECOL, ALTERTABLE_ADDPARTS, ALTERTABLE_DROPPARTS, ALTERTABLE_ADDCOLS, ALTERTABLE_REPLACECOLS, ALTERTABLE_RENAMEPART, ALTERTABLE_PROPERTIES, SHOWDATABASES, SHOWTABLES, SHOWCOLUMNS, SHOW_TABLESTATUS, SHOW_TBLPROPERTIES, SHOW_CREATETABLE, SHOWINDEXES, SHOWPARTITIONS, CREATEVIEW, DROPVIEW, CREATEINDEX, DROPINDEX, ALTERINDEX_REBUILD, ALTERVIEW_PROPERTIES, CREATEUSER, DROPUSER, CHANGE_PWD, AUTHENTICATION, SHOW_USERNAMES, CREATEROLE, DROPROLE, GRANT_PRIVILEGE, REVOKE_PRIVILEGE, SHOW_GRANT, GRANT_ROLE, REVOKE_ROLE, SHOW_ROLE_GRANT, CREATETABLE, QUERY, ALTERINDEX_PROPS, ALTERDATABASE, DESCDATABASE, ALTERTABLE_DROP_PROPERTIES]).freeze
end

module CreateOperation
  CREATE_NEW = 1
  CREATE_IF_NOT_EXIST_AND_GET_IF_EXIST = 2
  CREATE_NEW_IN_NODEGROUPS = 3
  CREATE_AUX_IDX_FILE = 4
  CREATE_NEW_RANDOM = 5
  VALUE_MAP = {1 => "CREATE_NEW", 2 => "CREATE_IF_NOT_EXIST_AND_GET_IF_EXIST", 3 => "CREATE_NEW_IN_NODEGROUPS", 4 => "CREATE_AUX_IDX_FILE", 5 => "CREATE_NEW_RANDOM"}
  VALID_VALUES = Set.new([CREATE_NEW, CREATE_IF_NOT_EXIST_AND_GET_IF_EXIST, CREATE_NEW_IN_NODEGROUPS, CREATE_AUX_IDX_FILE, CREATE_NEW_RANDOM]).freeze
end

class Version
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VERSION = 1
  COMMENTS = 2

  FIELDS = {
    VERSION => {:type => ::Thrift::Types::STRING, :name => 'version'},
    COMMENTS => {:type => ::Thrift::Types::STRING, :name => 'comments'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FieldSchema
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1
  TYPE = 2
  COMMENT = 3
  VERSION = 4

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    TYPE => {:type => ::Thrift::Types::STRING, :name => 'type'},
    COMMENT => {:type => ::Thrift::Types::STRING, :name => 'comment'},
    VERSION => {:type => ::Thrift::Types::I64, :name => 'version', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Type
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1
  TYPE1 = 2
  TYPE2 = 3
  FIELDS = 4

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    TYPE1 => {:type => ::Thrift::Types::STRING, :name => 'type1', :optional => true},
    TYPE2 => {:type => ::Thrift::Types::STRING, :name => 'type2', :optional => true},
    FIELDS => {:type => ::Thrift::Types::LIST, :name => 'fields', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class HiveObjectRef
  include ::Thrift::Struct, ::Thrift::Struct_Union
  OBJECTTYPE = 1
  DBNAME = 2
  OBJECTNAME = 3
  PARTVALUES = 4
  COLUMNNAME = 5

  FIELDS = {
    OBJECTTYPE => {:type => ::Thrift::Types::I32, :name => 'objectType', :enum_class => ::HiveObjectType},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    OBJECTNAME => {:type => ::Thrift::Types::STRING, :name => 'objectName'},
    PARTVALUES => {:type => ::Thrift::Types::LIST, :name => 'partValues', :element => {:type => ::Thrift::Types::STRING}},
    COLUMNNAME => {:type => ::Thrift::Types::STRING, :name => 'columnName'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @objectType.nil? || ::HiveObjectType::VALID_VALUES.include?(@objectType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field objectType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PrivilegeGrantInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRIVILEGE = 1
  CREATETIME = 2
  GRANTOR = 3
  GRANTORTYPE = 4
  GRANTOPTION = 5

  FIELDS = {
    PRIVILEGE => {:type => ::Thrift::Types::STRING, :name => 'privilege'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    GRANTOR => {:type => ::Thrift::Types::STRING, :name => 'grantor'},
    GRANTORTYPE => {:type => ::Thrift::Types::I32, :name => 'grantorType', :enum_class => ::PrincipalType},
    GRANTOPTION => {:type => ::Thrift::Types::BOOL, :name => 'grantOption'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @grantorType.nil? || ::PrincipalType::VALID_VALUES.include?(@grantorType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field grantorType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class HiveObjectPrivilege
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HIVEOBJECT = 1
  PRINCIPALNAME = 2
  PRINCIPALTYPE = 3
  GRANTINFO = 4

  FIELDS = {
    HIVEOBJECT => {:type => ::Thrift::Types::STRUCT, :name => 'hiveObject', :class => ::HiveObjectRef},
    PRINCIPALNAME => {:type => ::Thrift::Types::STRING, :name => 'principalName'},
    PRINCIPALTYPE => {:type => ::Thrift::Types::I32, :name => 'principalType', :enum_class => ::PrincipalType},
    GRANTINFO => {:type => ::Thrift::Types::STRUCT, :name => 'grantInfo', :class => ::PrivilegeGrantInfo}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @principalType.nil? || ::PrincipalType::VALID_VALUES.include?(@principalType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field principalType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PrivilegeBag
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRIVILEGES = 1

  FIELDS = {
    PRIVILEGES => {:type => ::Thrift::Types::LIST, :name => 'privileges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::HiveObjectPrivilege}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PrincipalPrivilegeSet
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USERPRIVILEGES = 1
  GROUPPRIVILEGES = 2
  ROLEPRIVILEGES = 3

  FIELDS = {
    USERPRIVILEGES => {:type => ::Thrift::Types::MAP, :name => 'userPrivileges', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::PrivilegeGrantInfo}}},
    GROUPPRIVILEGES => {:type => ::Thrift::Types::MAP, :name => 'groupPrivileges', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::PrivilegeGrantInfo}}},
    ROLEPRIVILEGES => {:type => ::Thrift::Types::MAP, :name => 'rolePrivileges', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::PrivilegeGrantInfo}}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Statfs
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FROM = 1
  TO = 2
  INCREATE = 3
  CLOSE = 4
  REPLICATED = 5
  RM_LOGICAL = 6
  RM_PHYSICAL = 7
  UNDERREP = 8
  OVERREP = 9
  LINGER = 10
  SUSPECT = 11
  INC_ONS = 12
  INC_ONS2 = 13
  CLS_OFFS = 14
  INCS = 15
  CLOS = 16
  FNRS = 17
  RECORDNR = 18
  LENGTH = 19

  FIELDS = {
    FROM => {:type => ::Thrift::Types::I64, :name => 'from'},
    TO => {:type => ::Thrift::Types::I64, :name => 'to'},
    INCREATE => {:type => ::Thrift::Types::I64, :name => 'increate'},
    CLOSE => {:type => ::Thrift::Types::I64, :name => 'close'},
    REPLICATED => {:type => ::Thrift::Types::I64, :name => 'replicated'},
    RM_LOGICAL => {:type => ::Thrift::Types::I64, :name => 'rm_logical'},
    RM_PHYSICAL => {:type => ::Thrift::Types::I64, :name => 'rm_physical'},
    UNDERREP => {:type => ::Thrift::Types::I64, :name => 'underrep'},
    OVERREP => {:type => ::Thrift::Types::I64, :name => 'overrep'},
    LINGER => {:type => ::Thrift::Types::I64, :name => 'linger'},
    SUSPECT => {:type => ::Thrift::Types::I64, :name => 'suspect'},
    INC_ONS => {:type => ::Thrift::Types::I64, :name => 'inc_ons'},
    INC_ONS2 => {:type => ::Thrift::Types::I64, :name => 'inc_ons2'},
    CLS_OFFS => {:type => ::Thrift::Types::I64, :name => 'cls_offs'},
    INCS => {:type => ::Thrift::Types::LIST, :name => 'incs', :element => {:type => ::Thrift::Types::I64}},
    CLOS => {:type => ::Thrift::Types::LIST, :name => 'clos', :element => {:type => ::Thrift::Types::I64}},
    FNRS => {:type => ::Thrift::Types::MAP, :name => 'fnrs', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}},
    RECORDNR => {:type => ::Thrift::Types::I64, :name => 'recordnr'},
    LENGTH => {:type => ::Thrift::Types::I64, :name => 'length'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Role
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ROLENAME = 1
  CREATETIME = 2
  OWNERNAME = 3

  FIELDS = {
    ROLENAME => {:type => ::Thrift::Types::STRING, :name => 'roleName'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    OWNERNAME => {:type => ::Thrift::Types::STRING, :name => 'ownerName'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class User
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USERNAME = 1
  PASSWORD = 2
  CREATETIME = 3
  OWNERNAME = 4

  FIELDS = {
    USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
    PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
    CREATETIME => {:type => ::Thrift::Types::I64, :name => 'createTime'},
    OWNERNAME => {:type => ::Thrift::Types::STRING, :name => 'ownerName'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Node
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NODE_NAME = 1
  IPS = 2
  STATUS = 3

  FIELDS = {
    NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'},
    IPS => {:type => ::Thrift::Types::LIST, :name => 'ips', :element => {:type => ::Thrift::Types::STRING}},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NodeGroup
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NODE_GROUP_NAME = 1
  COMMENT = 2
  STATUS = 3
  NODES = 4

  FIELDS = {
    NODE_GROUP_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_group_name'},
    COMMENT => {:type => ::Thrift::Types::STRING, :name => 'comment'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status'},
    NODES => {:type => ::Thrift::Types::SET, :name => 'nodes', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Node}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Database
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1
  DESCRIPTION = 2
  LOCATIONURI = 3
  PARAMETERS = 4
  PRIVILEGES = 5

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
    LOCATIONURI => {:type => ::Thrift::Types::STRING, :name => 'locationUri'},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    PRIVILEGES => {:type => ::Thrift::Types::STRUCT, :name => 'privileges', :class => ::PrincipalPrivilegeSet, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SerDeInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1
  SERIALIZATIONLIB = 2
  PARAMETERS = 3

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    SERIALIZATIONLIB => {:type => ::Thrift::Types::STRING, :name => 'serializationLib'},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Order
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COL = 1
  ORDER = 2

  FIELDS = {
    COL => {:type => ::Thrift::Types::STRING, :name => 'col'},
    ORDER => {:type => ::Thrift::Types::I32, :name => 'order'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SkewedInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SKEWEDCOLNAMES = 1
  SKEWEDCOLVALUES = 2
  SKEWEDCOLVALUELOCATIONMAPS = 3

  FIELDS = {
    SKEWEDCOLNAMES => {:type => ::Thrift::Types::LIST, :name => 'skewedColNames', :element => {:type => ::Thrift::Types::STRING}},
    SKEWEDCOLVALUES => {:type => ::Thrift::Types::LIST, :name => 'skewedColValues', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
    SKEWEDCOLVALUELOCATIONMAPS => {:type => ::Thrift::Types::MAP, :name => 'skewedColValueLocationMaps', :key => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class StorageDescriptor
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COLS = 1
  LOCATION = 2
  INPUTFORMAT = 3
  OUTPUTFORMAT = 4
  COMPRESSED = 5
  NUMBUCKETS = 6
  SERDEINFO = 7
  BUCKETCOLS = 8
  SORTCOLS = 9
  PARAMETERS = 10
  SKEWEDINFO = 11
  STOREDASSUBDIRECTORIES = 12

  FIELDS = {
    COLS => {:type => ::Thrift::Types::LIST, :name => 'cols', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}},
    LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
    INPUTFORMAT => {:type => ::Thrift::Types::STRING, :name => 'inputFormat'},
    OUTPUTFORMAT => {:type => ::Thrift::Types::STRING, :name => 'outputFormat'},
    COMPRESSED => {:type => ::Thrift::Types::BOOL, :name => 'compressed'},
    NUMBUCKETS => {:type => ::Thrift::Types::I32, :name => 'numBuckets'},
    SERDEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'serdeInfo', :class => ::SerDeInfo},
    BUCKETCOLS => {:type => ::Thrift::Types::LIST, :name => 'bucketCols', :element => {:type => ::Thrift::Types::STRING}},
    SORTCOLS => {:type => ::Thrift::Types::LIST, :name => 'sortCols', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Order}},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    SKEWEDINFO => {:type => ::Thrift::Types::STRUCT, :name => 'skewedInfo', :class => ::SkewedInfo, :optional => true},
    STOREDASSUBDIRECTORIES => {:type => ::Thrift::Types::BOOL, :name => 'storedAsSubDirectories', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Subpartition
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VALUES = 1
  DBNAME = 2
  TABLENAME = 3
  CREATETIME = 4
  LASTACCESSTIME = 5
  SD = 6
  PARAMETERS = 7
  FILES = 8
  PARTITIONNAME = 9
  VERSION = 10
  PRIVILEGES = 11

  FIELDS = {
    VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRING}},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    LASTACCESSTIME => {:type => ::Thrift::Types::I32, :name => 'lastAccessTime'},
    SD => {:type => ::Thrift::Types::STRUCT, :name => 'sd', :class => ::StorageDescriptor},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    FILES => {:type => ::Thrift::Types::LIST, :name => 'files', :element => {:type => ::Thrift::Types::I64}},
    PARTITIONNAME => {:type => ::Thrift::Types::STRING, :name => 'partitionName', :optional => true},
    VERSION => {:type => ::Thrift::Types::I32, :name => 'version', :optional => true},
    PRIVILEGES => {:type => ::Thrift::Types::STRUCT, :name => 'privileges', :class => ::PrincipalPrivilegeSet, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Partition
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VALUES = 1
  DBNAME = 2
  TABLENAME = 3
  CREATETIME = 4
  LASTACCESSTIME = 5
  SD = 6
  PARAMETERS = 7
  FILES = 8
  PARTITIONNAME = 9
  SUBPARTITIONS = 10
  VERSION = 11
  PRIVILEGES = 12

  FIELDS = {
    VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRING}},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    LASTACCESSTIME => {:type => ::Thrift::Types::I32, :name => 'lastAccessTime'},
    SD => {:type => ::Thrift::Types::STRUCT, :name => 'sd', :class => ::StorageDescriptor},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    FILES => {:type => ::Thrift::Types::LIST, :name => 'files', :element => {:type => ::Thrift::Types::I64}},
    PARTITIONNAME => {:type => ::Thrift::Types::STRING, :name => 'partitionName', :optional => true},
    SUBPARTITIONS => {:type => ::Thrift::Types::LIST, :name => 'subpartitions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Subpartition}, :optional => true},
    VERSION => {:type => ::Thrift::Types::I32, :name => 'version', :optional => true},
    PRIVILEGES => {:type => ::Thrift::Types::STRUCT, :name => 'privileges', :class => ::PrincipalPrivilegeSet, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GlobalSchema
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SCHEMANAME = 1
  OWNER = 2
  CREATETIME = 3
  LASTACCESSTIME = 4
  RETENTION = 5
  SD = 6
  PARAMETERS = 7
  VIEWORIGINALTEXT = 8
  VIEWEXPANDEDTEXT = 9
  SCHEMATYPE = 10
  PRIVILEGES = 11

  FIELDS = {
    SCHEMANAME => {:type => ::Thrift::Types::STRING, :name => 'schemaName'},
    OWNER => {:type => ::Thrift::Types::STRING, :name => 'owner'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    LASTACCESSTIME => {:type => ::Thrift::Types::I32, :name => 'lastAccessTime'},
    RETENTION => {:type => ::Thrift::Types::I32, :name => 'retention'},
    SD => {:type => ::Thrift::Types::STRUCT, :name => 'sd', :class => ::StorageDescriptor},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    VIEWORIGINALTEXT => {:type => ::Thrift::Types::STRING, :name => 'viewOriginalText'},
    VIEWEXPANDEDTEXT => {:type => ::Thrift::Types::STRING, :name => 'viewExpandedText'},
    SCHEMATYPE => {:type => ::Thrift::Types::STRING, :name => 'schemaType'},
    PRIVILEGES => {:type => ::Thrift::Types::STRUCT, :name => 'privileges', :class => ::PrincipalPrivilegeSet, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Table
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TABLENAME = 1
  DBNAME = 2
  SCHEMANAME = 3
  OWNER = 4
  CREATETIME = 5
  LASTACCESSTIME = 6
  RETENTION = 7
  SD = 8
  PARTITIONKEYS = 9
  PARAMETERS = 10
  VIEWORIGINALTEXT = 11
  VIEWEXPANDEDTEXT = 12
  TABLETYPE = 13
  NODEGROUPS = 14
  PRIVILEGES = 15
  PARTITIONS = 16
  FILESPLITKEYS = 17

  FIELDS = {
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    SCHEMANAME => {:type => ::Thrift::Types::STRING, :name => 'schemaName'},
    OWNER => {:type => ::Thrift::Types::STRING, :name => 'owner'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    LASTACCESSTIME => {:type => ::Thrift::Types::I32, :name => 'lastAccessTime'},
    RETENTION => {:type => ::Thrift::Types::I32, :name => 'retention'},
    SD => {:type => ::Thrift::Types::STRUCT, :name => 'sd', :class => ::StorageDescriptor},
    PARTITIONKEYS => {:type => ::Thrift::Types::LIST, :name => 'partitionKeys', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    VIEWORIGINALTEXT => {:type => ::Thrift::Types::STRING, :name => 'viewOriginalText'},
    VIEWEXPANDEDTEXT => {:type => ::Thrift::Types::STRING, :name => 'viewExpandedText'},
    TABLETYPE => {:type => ::Thrift::Types::STRING, :name => 'tableType'},
    NODEGROUPS => {:type => ::Thrift::Types::LIST, :name => 'nodeGroups', :element => {:type => ::Thrift::Types::STRUCT, :class => ::NodeGroup}},
    PRIVILEGES => {:type => ::Thrift::Types::STRUCT, :name => 'privileges', :class => ::PrincipalPrivilegeSet, :optional => true},
    PARTITIONS => {:type => ::Thrift::Types::LIST, :name => 'partitions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}, :optional => true},
    FILESPLITKEYS => {:type => ::Thrift::Types::LIST, :name => 'fileSplitKeys', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BusiTypeColumn
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BUSITYPE = 1
  TABLE = 2
  COLUMN = 3

  FIELDS = {
    BUSITYPE => {:type => ::Thrift::Types::STRING, :name => 'busiType'},
    TABLE => {:type => ::Thrift::Types::STRUCT, :name => 'table', :class => ::Table},
    COLUMN => {:type => ::Thrift::Types::STRING, :name => 'column'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BusiTypeDatacenter
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BUSITYPE = 1
  DB = 2

  FIELDS = {
    BUSITYPE => {:type => ::Thrift::Types::STRING, :name => 'busiType'},
    DB => {:type => ::Thrift::Types::STRUCT, :name => 'db', :class => ::Database}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SplitValue
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SPLITKEYNAME = 1
  LEVEL = 2
  VALUE = 3
  VERISON = 4

  FIELDS = {
    SPLITKEYNAME => {:type => ::Thrift::Types::STRING, :name => 'splitKeyName'},
    LEVEL => {:type => ::Thrift::Types::I32, :name => 'level'},
    VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
    VERISON => {:type => ::Thrift::Types::I64, :name => 'verison'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CreatePolicy
  include ::Thrift::Struct, ::Thrift::Struct_Union
  OPERATION = 1
  ARGUMENTS = 2

  FIELDS = {
    OPERATION => {:type => ::Thrift::Types::I32, :name => 'operation', :enum_class => ::CreateOperation},
    ARGUMENTS => {:type => ::Thrift::Types::LIST, :name => 'arguments', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @operation.nil? || ::CreateOperation::VALID_VALUES.include?(@operation)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field operation!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Device
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DEVID = 1
  PROP = 2
  NODE_NAME = 3
  STATUS = 4
  NG_NAME = 5

  FIELDS = {
    DEVID => {:type => ::Thrift::Types::STRING, :name => 'devid'},
    PROP => {:type => ::Thrift::Types::I32, :name => 'prop'},
    NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status'},
    NG_NAME => {:type => ::Thrift::Types::STRING, :name => 'ng_name'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SFileLocation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NODE_NAME = 1
  FID = 2
  DEVID = 3
  LOCATION = 4
  REP_ID = 5
  UPDATE_TIME = 6
  VISIT_STATUS = 7
  DIGEST = 8

  FIELDS = {
    NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'},
    FID => {:type => ::Thrift::Types::I64, :name => 'fid'},
    DEVID => {:type => ::Thrift::Types::STRING, :name => 'devid'},
    LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
    REP_ID => {:type => ::Thrift::Types::I32, :name => 'rep_id'},
    UPDATE_TIME => {:type => ::Thrift::Types::I64, :name => 'update_time'},
    VISIT_STATUS => {:type => ::Thrift::Types::I32, :name => 'visit_status'},
    DIGEST => {:type => ::Thrift::Types::STRING, :name => 'digest'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SFile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FID = 1
  DBNAME = 2
  TABLENAME = 3
  STORE_STATUS = 4
  REP_NR = 5
  DIGEST = 6
  RECORD_NR = 7
  ALL_RECORD_NR = 8
  LOCATIONS = 9
  LENGTH = 10
  REF_FILES = 11
  VALUES = 12
  LOAD_STATUS = 13

  FIELDS = {
    FID => {:type => ::Thrift::Types::I64, :name => 'fid'},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    STORE_STATUS => {:type => ::Thrift::Types::I32, :name => 'store_status'},
    REP_NR => {:type => ::Thrift::Types::I32, :name => 'rep_nr'},
    DIGEST => {:type => ::Thrift::Types::STRING, :name => 'digest'},
    RECORD_NR => {:type => ::Thrift::Types::I64, :name => 'record_nr'},
    ALL_RECORD_NR => {:type => ::Thrift::Types::I64, :name => 'all_record_nr'},
    LOCATIONS => {:type => ::Thrift::Types::LIST, :name => 'locations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFileLocation}},
    LENGTH => {:type => ::Thrift::Types::I64, :name => 'length'},
    REF_FILES => {:type => ::Thrift::Types::LIST, :name => 'ref_files', :element => {:type => ::Thrift::Types::I64}},
    VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplitValue}},
    LOAD_STATUS => {:type => ::Thrift::Types::I32, :name => 'load_status'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SFileRef
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FILE = 1
  ORIGIN_FID = 2

  FIELDS = {
    FILE => {:type => ::Thrift::Types::STRUCT, :name => 'file', :class => ::SFile},
    ORIGIN_FID => {:type => ::Thrift::Types::I64, :name => 'origin_fid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Busitype
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1
  COMMENT = 2

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    COMMENT => {:type => ::Thrift::Types::STRING, :name => 'comment'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Index
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INDEXNAME = 1
  INDEXHANDLERCLASS = 2
  DBNAME = 3
  ORIGTABLENAME = 4
  CREATETIME = 5
  LASTACCESSTIME = 6
  INDEXTABLENAME = 7
  SD = 8
  PARAMETERS = 9
  DEFERREDREBUILD = 10

  FIELDS = {
    INDEXNAME => {:type => ::Thrift::Types::STRING, :name => 'indexName'},
    INDEXHANDLERCLASS => {:type => ::Thrift::Types::STRING, :name => 'indexHandlerClass'},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    ORIGTABLENAME => {:type => ::Thrift::Types::STRING, :name => 'origTableName'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    LASTACCESSTIME => {:type => ::Thrift::Types::I32, :name => 'lastAccessTime'},
    INDEXTABLENAME => {:type => ::Thrift::Types::STRING, :name => 'indexTableName'},
    SD => {:type => ::Thrift::Types::STRUCT, :name => 'sd', :class => ::StorageDescriptor},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    DEFERREDREBUILD => {:type => ::Thrift::Types::BOOL, :name => 'deferredRebuild'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BooleanColumnStatsData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NUMTRUES = 1
  NUMFALSES = 2
  NUMNULLS = 3

  FIELDS = {
    NUMTRUES => {:type => ::Thrift::Types::I64, :name => 'numTrues'},
    NUMFALSES => {:type => ::Thrift::Types::I64, :name => 'numFalses'},
    NUMNULLS => {:type => ::Thrift::Types::I64, :name => 'numNulls'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numTrues is unset!') unless @numTrues
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numFalses is unset!') unless @numFalses
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numNulls is unset!') unless @numNulls
  end

  ::Thrift::Struct.generate_accessors self
end

class DoubleColumnStatsData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LOWVALUE = 1
  HIGHVALUE = 2
  NUMNULLS = 3
  NUMDVS = 4

  FIELDS = {
    LOWVALUE => {:type => ::Thrift::Types::DOUBLE, :name => 'lowValue'},
    HIGHVALUE => {:type => ::Thrift::Types::DOUBLE, :name => 'highValue'},
    NUMNULLS => {:type => ::Thrift::Types::I64, :name => 'numNulls'},
    NUMDVS => {:type => ::Thrift::Types::I64, :name => 'numDVs'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lowValue is unset!') unless @lowValue
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field highValue is unset!') unless @highValue
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numNulls is unset!') unless @numNulls
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numDVs is unset!') unless @numDVs
  end

  ::Thrift::Struct.generate_accessors self
end

class LongColumnStatsData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LOWVALUE = 1
  HIGHVALUE = 2
  NUMNULLS = 3
  NUMDVS = 4

  FIELDS = {
    LOWVALUE => {:type => ::Thrift::Types::I64, :name => 'lowValue'},
    HIGHVALUE => {:type => ::Thrift::Types::I64, :name => 'highValue'},
    NUMNULLS => {:type => ::Thrift::Types::I64, :name => 'numNulls'},
    NUMDVS => {:type => ::Thrift::Types::I64, :name => 'numDVs'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lowValue is unset!') unless @lowValue
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field highValue is unset!') unless @highValue
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numNulls is unset!') unless @numNulls
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numDVs is unset!') unless @numDVs
  end

  ::Thrift::Struct.generate_accessors self
end

class StringColumnStatsData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MAXCOLLEN = 1
  AVGCOLLEN = 2
  NUMNULLS = 3
  NUMDVS = 4

  FIELDS = {
    MAXCOLLEN => {:type => ::Thrift::Types::I64, :name => 'maxColLen'},
    AVGCOLLEN => {:type => ::Thrift::Types::DOUBLE, :name => 'avgColLen'},
    NUMNULLS => {:type => ::Thrift::Types::I64, :name => 'numNulls'},
    NUMDVS => {:type => ::Thrift::Types::I64, :name => 'numDVs'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field maxColLen is unset!') unless @maxColLen
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field avgColLen is unset!') unless @avgColLen
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numNulls is unset!') unless @numNulls
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numDVs is unset!') unless @numDVs
  end

  ::Thrift::Struct.generate_accessors self
end

class BinaryColumnStatsData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MAXCOLLEN = 1
  AVGCOLLEN = 2
  NUMNULLS = 3

  FIELDS = {
    MAXCOLLEN => {:type => ::Thrift::Types::I64, :name => 'maxColLen'},
    AVGCOLLEN => {:type => ::Thrift::Types::DOUBLE, :name => 'avgColLen'},
    NUMNULLS => {:type => ::Thrift::Types::I64, :name => 'numNulls'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field maxColLen is unset!') unless @maxColLen
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field avgColLen is unset!') unless @avgColLen
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field numNulls is unset!') unless @numNulls
  end

  ::Thrift::Struct.generate_accessors self
end

class ColumnStatisticsData < ::Thrift::Union
  include ::Thrift::Struct_Union
  class << self
    def booleanStats(val)
      ColumnStatisticsData.new(:booleanStats, val)
    end

    def longStats(val)
      ColumnStatisticsData.new(:longStats, val)
    end

    def doubleStats(val)
      ColumnStatisticsData.new(:doubleStats, val)
    end

    def stringStats(val)
      ColumnStatisticsData.new(:stringStats, val)
    end

    def binaryStats(val)
      ColumnStatisticsData.new(:binaryStats, val)
    end
  end

  BOOLEANSTATS = 1
  LONGSTATS = 2
  DOUBLESTATS = 3
  STRINGSTATS = 4
  BINARYSTATS = 5

  FIELDS = {
    BOOLEANSTATS => {:type => ::Thrift::Types::STRUCT, :name => 'booleanStats', :class => ::BooleanColumnStatsData},
    LONGSTATS => {:type => ::Thrift::Types::STRUCT, :name => 'longStats', :class => ::LongColumnStatsData},
    DOUBLESTATS => {:type => ::Thrift::Types::STRUCT, :name => 'doubleStats', :class => ::DoubleColumnStatsData},
    STRINGSTATS => {:type => ::Thrift::Types::STRUCT, :name => 'stringStats', :class => ::StringColumnStatsData},
    BINARYSTATS => {:type => ::Thrift::Types::STRUCT, :name => 'binaryStats', :class => ::BinaryColumnStatsData}
  }

  def struct_fields; FIELDS; end

  def validate
    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
  end

  ::Thrift::Union.generate_accessors self
end

class ColumnStatisticsObj
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COLNAME = 1
  COLTYPE = 2
  STATSDATA = 3

  FIELDS = {
    COLNAME => {:type => ::Thrift::Types::STRING, :name => 'colName'},
    COLTYPE => {:type => ::Thrift::Types::STRING, :name => 'colType'},
    STATSDATA => {:type => ::Thrift::Types::STRUCT, :name => 'statsData', :class => ::ColumnStatisticsData}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field colName is unset!') unless @colName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field colType is unset!') unless @colType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field statsData is unset!') unless @statsData
  end

  ::Thrift::Struct.generate_accessors self
end

class ColumnStatisticsDesc
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ISTBLLEVEL = 1
  DBNAME = 2
  TABLENAME = 3
  PARTNAME = 4
  LASTANALYZED = 5

  FIELDS = {
    ISTBLLEVEL => {:type => ::Thrift::Types::BOOL, :name => 'isTblLevel'},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    PARTNAME => {:type => ::Thrift::Types::STRING, :name => 'partName', :optional => true},
    LASTANALYZED => {:type => ::Thrift::Types::I64, :name => 'lastAnalyzed', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field isTblLevel is unset!') if @isTblLevel.nil?
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dbName is unset!') unless @dbName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tableName is unset!') unless @tableName
  end

  ::Thrift::Struct.generate_accessors self
end

class ColumnStatistics
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATSDESC = 1
  STATSOBJ = 2

  FIELDS = {
    STATSDESC => {:type => ::Thrift::Types::STRUCT, :name => 'statsDesc', :class => ::ColumnStatisticsDesc},
    STATSOBJ => {:type => ::Thrift::Types::LIST, :name => 'statsObj', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ColumnStatisticsObj}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field statsDesc is unset!') unless @statsDesc
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field statsObj is unset!') unless @statsObj
  end

  ::Thrift::Struct.generate_accessors self
end

class Schema
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FIELDSCHEMAS = 1
  PROPERTIES = 2

  FIELDS = {
    FIELDSCHEMAS => {:type => ::Thrift::Types::LIST, :name => 'fieldSchemas', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}},
    PROPERTIES => {:type => ::Thrift::Types::MAP, :name => 'properties', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class EnvironmentContext
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PROPERTIES = 1

  FIELDS = {
    PROPERTIES => {:type => ::Thrift::Types::MAP, :name => 'properties', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GeoLocation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  GEOLOCNAME = 1
  NATION = 2
  PROVINCE = 3
  CITY = 4
  DIST = 5

  FIELDS = {
    GEOLOCNAME => {:type => ::Thrift::Types::STRING, :name => 'geoLocName'},
    NATION => {:type => ::Thrift::Types::STRING, :name => 'nation'},
    PROVINCE => {:type => ::Thrift::Types::STRING, :name => 'province'},
    CITY => {:type => ::Thrift::Types::STRING, :name => 'city'},
    DIST => {:type => ::Thrift::Types::STRING, :name => 'dist'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field geoLocName is unset!') unless @geoLocName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field nation is unset!') unless @nation
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field province is unset!') unless @province
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field city is unset!') unless @city
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dist is unset!') unless @dist
  end

  ::Thrift::Struct.generate_accessors self
end

class EquipRoom
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EQROOMNAME = 1
  STATUS = 2
  COMMENT = 3
  GEOLOCATION = 4

  FIELDS = {
    EQROOMNAME => {:type => ::Thrift::Types::STRING, :name => 'eqRoomName'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status'},
    COMMENT => {:type => ::Thrift::Types::STRING, :name => 'comment', :optional => true},
    GEOLOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'geolocation', :class => ::GeoLocation, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field eqRoomName is unset!') unless @eqRoomName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field status is unset!') unless @status
  end

  ::Thrift::Struct.generate_accessors self
end

class MetaException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UnknownTableException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UnknownDBException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class AlreadyExistsException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InvalidPartitionException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UnknownPartitionException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InvalidObjectException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NoSuchObjectException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class IndexAlreadyExistsException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InvalidOperationException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ConfigValSecurityException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InvalidInputException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FileOperationException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGE = 1
  REASON = 2

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
    REASON => {:type => ::Thrift::Types::I32, :name => 'reason', :enum_class => ::FOFailReason}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @reason.nil? || ::FOFailReason::VALID_VALUES.include?(@reason)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field reason!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

