#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ThriftHiveMetastore
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void create_attribution(Database db)'
  print '  Database get_attribution(string name)'
  print '  void drop_attribution(string name, bool deleteData, bool cascade)'
  print '  void update_attribution(Database db)'
  print '   get_all_attributions()'
  print '  Database get_local_attribution()'
  print '   get_lucene_index_names(string db_name, string tbl_name, i16 max_indexes)'
  print '   get_all_busi_type_cols()'
  print '   get_all_busi_type_datacenters()'
  print '  void append_busi_type_datacenter(BusiTypeDatacenter busiTypeDatacenter)'
  print '  bool add_datawarehouse_sql(i32 dwNum, string sql)'
  print '   showBusitypes()'
  print '  i32 createBusitype(Busitype busitype)'
  print '  i32 add_partition_files(Partition part,  files)'
  print '  i32 drop_partition_files(Partition part,  files)'
  print '  i32 add_subpartition_files(Subpartition subpart,  files)'
  print '  i32 drop_subpartition_files(Subpartition subpart,  files)'
  print '  bool add_partition_index(Index index, Partition part)'
  print '  bool drop_partition_index(Index index, Partition part)'
  print '  bool add_subpartition_index(Index index, Subpartition part)'
  print '  bool drop_subpartition_index(Index index, Subpartition part)'
  print '  bool add_subpartition(string dbname, string tbl_name,  part_vals, Subpartition sub_part)'
  print '   get_subpartitions(string dbname, string tbl_name, Partition part)'
  print '  bool add_partition_index_files(Index index, Partition part,  file,  originfid)'
  print '   get_partition_index_files(Index index, Partition part)'
  print '  bool drop_partition_index_files(Index index, Partition part,  file)'
  print '  bool add_subpartition_index_files(Index index, Subpartition subpart,  file,  originfid)'
  print '   get_subpartition_index_files(Index index, Subpartition subpart)'
  print '  bool drop_subpartition_index_files(Index index, Subpartition subpart,  file)'
  print '  bool addGeoLocation(GeoLocation gl)'
  print '  bool modifyGeoLocation(GeoLocation gl)'
  print '  bool deleteGeoLocation(GeoLocation gl)'
  print '   listGeoLocation()'
  print '  bool addEquipRoom(EquipRoom er)'
  print '  bool modifyEquipRoom(EquipRoom er)'
  print '  bool deleteEquipRoom(EquipRoom er)'
  print '   listEquipRoom()'
  print '  GeoLocation getGeoLocationByName(string geoLocName)'
  print '   getGeoLocationByNames( geoLocNames)'
  print '  bool addNodeAssignment(string nodeName, string dbName)'
  print '  bool deleteNodeAssignment(string nodeName, string dbName)'
  print '   listNodes()'
  print '  bool addUserAssignment(string roleName, string dbName)'
  print '  bool deleteUserAssignment(string roleName, string dbName)'
  print '   listUsers()'
  print '  bool addRoleAssignment(string userName, string dbName)'
  print '  bool deleteRoleAssignment(string userName, string dbName)'
  print '   listRoles()'
  print '  bool addNodeGroupAssignment(NodeGroup ng, string dbName)'
  print '  bool deleteNodeGroupAssignment(NodeGroup ng, string dbName)'
  print '  string pingPong(string str)'
  print '  bool alterNodeGroup(NodeGroup ng)'
  print '  void create_database(Database database)'
  print '  Database get_database(string name)'
  print '  void drop_database(string name, bool deleteData, bool cascade)'
  print '   get_databases(string pattern)'
  print '   get_all_databases()'
  print '  void alter_database(string dbname, Database db)'
  print '  Type get_type(string name)'
  print '  bool create_type(Type type)'
  print '  bool drop_type(string type)'
  print '   get_type_all(string name)'
  print '   get_fields(string db_name, string table_name)'
  print '   get_schema(string db_name, string table_name)'
  print '  void create_table(Table tbl)'
  print '  void create_table_by_user(Table tbl, User user)'
  print '  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)'
  print '  void drop_table(string dbname, string name, bool deleteData)'
  print '   get_tables(string db_name, string pattern)'
  print '   get_all_tables(string db_name)'
  print '  Table get_table(string dbname, string tbl_name)'
  print '   get_table_objects_by_name(string dbname,  tbl_names)'
  print '   get_table_names_by_filter(string dbname, string filter, i16 max_tables)'
  print '  void alter_table(string dbname, string tbl_name, Table new_tbl)'
  print '  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)'
  print '  Partition add_partition(Partition new_part)'
  print '  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)'
  print '  i32 add_partitions( new_parts)'
  print '  Partition append_partition(string db_name, string tbl_name,  part_vals)'
  print '  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)'
  print '  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)'
  print '  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)'
  print '  Partition get_partition(string db_name, string tbl_name,  part_vals)'
  print '  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)'
  print '  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)'
  print '   get_partitions(string db_name, string tbl_name, i16 max_parts)'
  print '   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)'
  print '   get_partition_names(string db_name, string tbl_name, i16 max_parts)'
  print '   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)'
  print '   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)'
  print '   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)'
  print '   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)'
  print '   get_partitions_by_names(string db_name, string tbl_name,  names)'
  print '  void alter_partition(string db_name, string tbl_name, Partition new_part)'
  print '  void alter_partitions(string db_name, string tbl_name,  new_parts)'
  print '  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)'
  print '  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)'
  print '  string get_config_value(string name, string defaultValue)'
  print '   partition_name_to_vals(string part_name)'
  print '   partition_name_to_spec(string part_name)'
  print '  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)'
  print '  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)'
  print '  Index add_index(Index new_index, Table index_table)'
  print '  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)'
  print '  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)'
  print '  Index get_index_by_name(string db_name, string tbl_name, string index_name)'
  print '   get_indexes(string db_name, string tbl_name, i16 max_indexes)'
  print '   get_index_names(string db_name, string tbl_name, i16 max_indexes)'
  print '  bool update_table_column_statistics(ColumnStatistics stats_obj)'
  print '  bool update_partition_column_statistics(ColumnStatistics stats_obj)'
  print '  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)'
  print '  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)'
  print '  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)'
  print '  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)'
  print '  bool create_user(User user)'
  print '  bool drop_user(string user_name)'
  print '  bool modify_user(User user)'
  print '   list_users_names()'
  print '   list_users(Database db)'
  print '  bool authentication(string user_name, string passwd)'
  print '  bool user_authority_check(User user, Table tbl,  ops)'
  print '  bool create_role(Role role)'
  print '  bool drop_role(string role_name)'
  print '   get_role_names()'
  print '  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)'
  print '  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)'
  print '   list_roles(string principal_name, PrincipalType principal_type)'
  print '  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)'
  print '   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)'
  print '  bool grant_privileges(PrivilegeBag privileges)'
  print '  bool revoke_privileges(PrivilegeBag privileges)'
  print '   set_ugi(string user_name,  group_names)'
  print '  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)'
  print '  i64 renew_delegation_token(string token_str_form)'
  print '  void cancel_delegation_token(string token_str_form)'
  print '  SFile create_file(string node_name, i32 repnr, string db_name, string table_name,  values)'
  print '  SFile create_file_by_policy(CreatePolicy policy, i32 repnr, string db_name, string table_name,  values)'
  print '  void set_file_repnr(i64 fid, i32 repnr)'
  print '  bool reopen_file(i64 fid)'
  print '  i32 close_file(SFile file)'
  print '  bool online_filelocation(SFile file)'
  print '  bool offline_filelocation(SFileLocation sfl)'
  print '  bool set_loadstatus_bad(i64 fid)'
  print '  bool toggle_safemode()'
  print '  SFile get_file_by_id(i64 fid)'
  print '  i32 del_fileLocation(SFileLocation sfl)'
  print '  SFile get_file_by_name(string node, string devid, string location)'
  print '  i32 rm_file_logical(SFile file)'
  print '  i32 restore_file(SFile file)'
  print '  i32 rm_file_physical(SFile file)'
  print '  Node get_node(string node_name)'
  print '  Node add_node(string node_name,  ipl)'
  print '  i32 del_node(string node_name)'
  print '  Device create_device(string devid, i32 prop, string node_name)'
  print '  Device get_device(string devid)'
  print '  bool del_device(string devid)'
  print '  Device modify_device(Device dev, Node node)'
  print '   list_device()'
  print '  Node alter_node(string node_name,  ipl, i32 status)'
  print '   find_best_nodes(i32 nr)'
  print '   find_best_nodes_in_groups(string dbName, string tableName, i32 nr, FindNodePolicy policy)'
  print '   get_all_nodes()'
  print '  string getDMStatus()'
  print '  string getNodeInfo()'
  print '  bool migrate_in(Table tbl,  files,  idxs, string from_db, string to_devid,  fileMap)'
  print '   migrate_stage1(string dbName, string tableName,  files, string to_db)'
  print '  bool migrate_stage2(string dbName, string tableName,  files, string from_db, string to_db, string to_devid, string user, string password)'
  print '  bool migrate2_in(Table tbl,  parts,  idxs, string from_db, string to_nas_devid,  fileMap)'
  print '   migrate2_stage1(string dbName, string tableName,  partNames, string to_db)'
  print '  bool migrate2_stage2(string dbName, string tableName,  partNames, string from_db, string to_db, string to_nas_devid)'
  print '  string getMP(string node_name, string devid)'
  print '  i64 getSessionId()'
  print '  bool createSchema(GlobalSchema schema)'
  print '  bool modifySchema(string schemaName, GlobalSchema schema)'
  print '  bool deleteSchema(string schemaName)'
  print '   listSchemas()'
  print '  GlobalSchema getSchemaByName(string schemaName)'
  print '   getTableNodeGroups(string dbName, string tabName)'
  print '   getTableNodeFiles(string dbName, string tabName, string nodeName)'
  print '   listTableFiles(string dbName, string tabName, i32 from, i32 to)'
  print '   listFilesByDigest(string digest)'
  print '   filterTableFiles(string dbName, string tabName,  values)'
  print '  void truncTableFiles(string dbName, string tabName)'
  print '  bool addNodeGroup(NodeGroup ng)'
  print '  bool modifyNodeGroup(string schemaName, NodeGroup ng)'
  print '  bool deleteNodeGroup(NodeGroup ng)'
  print '   listNodeGroups()'
  print '   listDBNodeGroups(string dbName)'
  print '   listNodeGroupByNames( ngNames)'
  print '  bool addTableNodeDist(string db, string tab,  ng)'
  print '  bool deleteTableNodeDist(string db, string tab,  ng)'
  print '   listTableNodeDists(string dbName, string tabName)'
  print '  bool assiginSchematoDB(string dbName, string schemaName,  fileSplitKeys,  part_keys,  ngs)'
  print '  statfs statFileSystem(i64 begin_time, i64 end_time)'
  print '  i64 getMaxFid()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ThriftHiveMetastore.Client(protocol)
transport.open()

if cmd == 'create_attribution':
  if len(args) != 1:
    print 'create_attribution requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_attribution(eval(args[0]),))

elif cmd == 'get_attribution':
  if len(args) != 1:
    print 'get_attribution requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_attribution(args[0],))

elif cmd == 'drop_attribution':
  if len(args) != 3:
    print 'drop_attribution requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_attribution(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'update_attribution':
  if len(args) != 1:
    print 'update_attribution requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_attribution(eval(args[0]),))

elif cmd == 'get_all_attributions':
  if len(args) != 0:
    print 'get_all_attributions requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_all_attributions())

elif cmd == 'get_local_attribution':
  if len(args) != 0:
    print 'get_local_attribution requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_local_attribution())

elif cmd == 'get_lucene_index_names':
  if len(args) != 3:
    print 'get_lucene_index_names requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_lucene_index_names(args[0],args[1],eval(args[2]),))

elif cmd == 'get_all_busi_type_cols':
  if len(args) != 0:
    print 'get_all_busi_type_cols requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_all_busi_type_cols())

elif cmd == 'get_all_busi_type_datacenters':
  if len(args) != 0:
    print 'get_all_busi_type_datacenters requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_all_busi_type_datacenters())

elif cmd == 'append_busi_type_datacenter':
  if len(args) != 1:
    print 'append_busi_type_datacenter requires 1 args'
    sys.exit(1)
  pp.pprint(client.append_busi_type_datacenter(eval(args[0]),))

elif cmd == 'add_datawarehouse_sql':
  if len(args) != 2:
    print 'add_datawarehouse_sql requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_datawarehouse_sql(eval(args[0]),args[1],))

elif cmd == 'showBusitypes':
  if len(args) != 0:
    print 'showBusitypes requires 0 args'
    sys.exit(1)
  pp.pprint(client.showBusitypes())

elif cmd == 'createBusitype':
  if len(args) != 1:
    print 'createBusitype requires 1 args'
    sys.exit(1)
  pp.pprint(client.createBusitype(eval(args[0]),))

elif cmd == 'add_partition_files':
  if len(args) != 2:
    print 'add_partition_files requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_partition_files(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_partition_files':
  if len(args) != 2:
    print 'drop_partition_files requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_partition_files(eval(args[0]),eval(args[1]),))

elif cmd == 'add_subpartition_files':
  if len(args) != 2:
    print 'add_subpartition_files requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_subpartition_files(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_subpartition_files':
  if len(args) != 2:
    print 'drop_subpartition_files requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_subpartition_files(eval(args[0]),eval(args[1]),))

elif cmd == 'add_partition_index':
  if len(args) != 2:
    print 'add_partition_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_partition_index(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_partition_index':
  if len(args) != 2:
    print 'drop_partition_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_partition_index(eval(args[0]),eval(args[1]),))

elif cmd == 'add_subpartition_index':
  if len(args) != 2:
    print 'add_subpartition_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_subpartition_index(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_subpartition_index':
  if len(args) != 2:
    print 'drop_subpartition_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_subpartition_index(eval(args[0]),eval(args[1]),))

elif cmd == 'add_subpartition':
  if len(args) != 4:
    print 'add_subpartition requires 4 args'
    sys.exit(1)
  pp.pprint(client.add_subpartition(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_subpartitions':
  if len(args) != 3:
    print 'get_subpartitions requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_subpartitions(args[0],args[1],eval(args[2]),))

elif cmd == 'add_partition_index_files':
  if len(args) != 4:
    print 'add_partition_index_files requires 4 args'
    sys.exit(1)
  pp.pprint(client.add_partition_index_files(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'get_partition_index_files':
  if len(args) != 2:
    print 'get_partition_index_files requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_partition_index_files(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_partition_index_files':
  if len(args) != 3:
    print 'drop_partition_index_files requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_partition_index_files(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'add_subpartition_index_files':
  if len(args) != 4:
    print 'add_subpartition_index_files requires 4 args'
    sys.exit(1)
  pp.pprint(client.add_subpartition_index_files(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'get_subpartition_index_files':
  if len(args) != 2:
    print 'get_subpartition_index_files requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_subpartition_index_files(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_subpartition_index_files':
  if len(args) != 3:
    print 'drop_subpartition_index_files requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_subpartition_index_files(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addGeoLocation':
  if len(args) != 1:
    print 'addGeoLocation requires 1 args'
    sys.exit(1)
  pp.pprint(client.addGeoLocation(eval(args[0]),))

elif cmd == 'modifyGeoLocation':
  if len(args) != 1:
    print 'modifyGeoLocation requires 1 args'
    sys.exit(1)
  pp.pprint(client.modifyGeoLocation(eval(args[0]),))

elif cmd == 'deleteGeoLocation':
  if len(args) != 1:
    print 'deleteGeoLocation requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteGeoLocation(eval(args[0]),))

elif cmd == 'listGeoLocation':
  if len(args) != 0:
    print 'listGeoLocation requires 0 args'
    sys.exit(1)
  pp.pprint(client.listGeoLocation())

elif cmd == 'addEquipRoom':
  if len(args) != 1:
    print 'addEquipRoom requires 1 args'
    sys.exit(1)
  pp.pprint(client.addEquipRoom(eval(args[0]),))

elif cmd == 'modifyEquipRoom':
  if len(args) != 1:
    print 'modifyEquipRoom requires 1 args'
    sys.exit(1)
  pp.pprint(client.modifyEquipRoom(eval(args[0]),))

elif cmd == 'deleteEquipRoom':
  if len(args) != 1:
    print 'deleteEquipRoom requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteEquipRoom(eval(args[0]),))

elif cmd == 'listEquipRoom':
  if len(args) != 0:
    print 'listEquipRoom requires 0 args'
    sys.exit(1)
  pp.pprint(client.listEquipRoom())

elif cmd == 'getGeoLocationByName':
  if len(args) != 1:
    print 'getGeoLocationByName requires 1 args'
    sys.exit(1)
  pp.pprint(client.getGeoLocationByName(args[0],))

elif cmd == 'getGeoLocationByNames':
  if len(args) != 1:
    print 'getGeoLocationByNames requires 1 args'
    sys.exit(1)
  pp.pprint(client.getGeoLocationByNames(eval(args[0]),))

elif cmd == 'addNodeAssignment':
  if len(args) != 2:
    print 'addNodeAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.addNodeAssignment(args[0],args[1],))

elif cmd == 'deleteNodeAssignment':
  if len(args) != 2:
    print 'deleteNodeAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteNodeAssignment(args[0],args[1],))

elif cmd == 'listNodes':
  if len(args) != 0:
    print 'listNodes requires 0 args'
    sys.exit(1)
  pp.pprint(client.listNodes())

elif cmd == 'addUserAssignment':
  if len(args) != 2:
    print 'addUserAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.addUserAssignment(args[0],args[1],))

elif cmd == 'deleteUserAssignment':
  if len(args) != 2:
    print 'deleteUserAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteUserAssignment(args[0],args[1],))

elif cmd == 'listUsers':
  if len(args) != 0:
    print 'listUsers requires 0 args'
    sys.exit(1)
  pp.pprint(client.listUsers())

elif cmd == 'addRoleAssignment':
  if len(args) != 2:
    print 'addRoleAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.addRoleAssignment(args[0],args[1],))

elif cmd == 'deleteRoleAssignment':
  if len(args) != 2:
    print 'deleteRoleAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteRoleAssignment(args[0],args[1],))

elif cmd == 'listRoles':
  if len(args) != 0:
    print 'listRoles requires 0 args'
    sys.exit(1)
  pp.pprint(client.listRoles())

elif cmd == 'addNodeGroupAssignment':
  if len(args) != 2:
    print 'addNodeGroupAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.addNodeGroupAssignment(eval(args[0]),args[1],))

elif cmd == 'deleteNodeGroupAssignment':
  if len(args) != 2:
    print 'deleteNodeGroupAssignment requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteNodeGroupAssignment(eval(args[0]),args[1],))

elif cmd == 'pingPong':
  if len(args) != 1:
    print 'pingPong requires 1 args'
    sys.exit(1)
  pp.pprint(client.pingPong(args[0],))

elif cmd == 'alterNodeGroup':
  if len(args) != 1:
    print 'alterNodeGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.alterNodeGroup(eval(args[0]),))

elif cmd == 'create_database':
  if len(args) != 1:
    print 'create_database requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_database(eval(args[0]),))

elif cmd == 'get_database':
  if len(args) != 1:
    print 'get_database requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_database(args[0],))

elif cmd == 'drop_database':
  if len(args) != 3:
    print 'drop_database requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_database(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'get_databases':
  if len(args) != 1:
    print 'get_databases requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_databases(args[0],))

elif cmd == 'get_all_databases':
  if len(args) != 0:
    print 'get_all_databases requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_all_databases())

elif cmd == 'alter_database':
  if len(args) != 2:
    print 'alter_database requires 2 args'
    sys.exit(1)
  pp.pprint(client.alter_database(args[0],eval(args[1]),))

elif cmd == 'get_type':
  if len(args) != 1:
    print 'get_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_type(args[0],))

elif cmd == 'create_type':
  if len(args) != 1:
    print 'create_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_type(eval(args[0]),))

elif cmd == 'drop_type':
  if len(args) != 1:
    print 'drop_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.drop_type(args[0],))

elif cmd == 'get_type_all':
  if len(args) != 1:
    print 'get_type_all requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_type_all(args[0],))

elif cmd == 'get_fields':
  if len(args) != 2:
    print 'get_fields requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_fields(args[0],args[1],))

elif cmd == 'get_schema':
  if len(args) != 2:
    print 'get_schema requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_schema(args[0],args[1],))

elif cmd == 'create_table':
  if len(args) != 1:
    print 'create_table requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_table(eval(args[0]),))

elif cmd == 'create_table_by_user':
  if len(args) != 2:
    print 'create_table_by_user requires 2 args'
    sys.exit(1)
  pp.pprint(client.create_table_by_user(eval(args[0]),eval(args[1]),))

elif cmd == 'create_table_with_environment_context':
  if len(args) != 2:
    print 'create_table_with_environment_context requires 2 args'
    sys.exit(1)
  pp.pprint(client.create_table_with_environment_context(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_table':
  if len(args) != 3:
    print 'drop_table requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_table(args[0],args[1],eval(args[2]),))

elif cmd == 'get_tables':
  if len(args) != 2:
    print 'get_tables requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_tables(args[0],args[1],))

elif cmd == 'get_all_tables':
  if len(args) != 1:
    print 'get_all_tables requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_all_tables(args[0],))

elif cmd == 'get_table':
  if len(args) != 2:
    print 'get_table requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_table(args[0],args[1],))

elif cmd == 'get_table_objects_by_name':
  if len(args) != 2:
    print 'get_table_objects_by_name requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_table_objects_by_name(args[0],eval(args[1]),))

elif cmd == 'get_table_names_by_filter':
  if len(args) != 3:
    print 'get_table_names_by_filter requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_table_names_by_filter(args[0],args[1],eval(args[2]),))

elif cmd == 'alter_table':
  if len(args) != 3:
    print 'alter_table requires 3 args'
    sys.exit(1)
  pp.pprint(client.alter_table(args[0],args[1],eval(args[2]),))

elif cmd == 'alter_table_with_environment_context':
  if len(args) != 4:
    print 'alter_table_with_environment_context requires 4 args'
    sys.exit(1)
  pp.pprint(client.alter_table_with_environment_context(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'add_partition':
  if len(args) != 1:
    print 'add_partition requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_partition(eval(args[0]),))

elif cmd == 'add_partition_with_environment_context':
  if len(args) != 2:
    print 'add_partition_with_environment_context requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_partition_with_environment_context(eval(args[0]),eval(args[1]),))

elif cmd == 'add_partitions':
  if len(args) != 1:
    print 'add_partitions requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_partitions(eval(args[0]),))

elif cmd == 'append_partition':
  if len(args) != 3:
    print 'append_partition requires 3 args'
    sys.exit(1)
  pp.pprint(client.append_partition(args[0],args[1],eval(args[2]),))

elif cmd == 'append_partition_by_name':
  if len(args) != 3:
    print 'append_partition_by_name requires 3 args'
    sys.exit(1)
  pp.pprint(client.append_partition_by_name(args[0],args[1],args[2],))

elif cmd == 'drop_partition':
  if len(args) != 4:
    print 'drop_partition requires 4 args'
    sys.exit(1)
  pp.pprint(client.drop_partition(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'drop_partition_by_name':
  if len(args) != 4:
    print 'drop_partition_by_name requires 4 args'
    sys.exit(1)
  pp.pprint(client.drop_partition_by_name(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'get_partition':
  if len(args) != 3:
    print 'get_partition requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_partition(args[0],args[1],eval(args[2]),))

elif cmd == 'get_partition_with_auth':
  if len(args) != 5:
    print 'get_partition_with_auth requires 5 args'
    sys.exit(1)
  pp.pprint(client.get_partition_with_auth(args[0],args[1],eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'get_partition_by_name':
  if len(args) != 3:
    print 'get_partition_by_name requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_partition_by_name(args[0],args[1],args[2],))

elif cmd == 'get_partitions':
  if len(args) != 3:
    print 'get_partitions requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_partitions(args[0],args[1],eval(args[2]),))

elif cmd == 'get_partitions_with_auth':
  if len(args) != 5:
    print 'get_partitions_with_auth requires 5 args'
    sys.exit(1)
  pp.pprint(client.get_partitions_with_auth(args[0],args[1],eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'get_partition_names':
  if len(args) != 3:
    print 'get_partition_names requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_partition_names(args[0],args[1],eval(args[2]),))

elif cmd == 'get_partitions_ps':
  if len(args) != 4:
    print 'get_partitions_ps requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_partitions_ps(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_partitions_ps_with_auth':
  if len(args) != 6:
    print 'get_partitions_ps_with_auth requires 6 args'
    sys.exit(1)
  pp.pprint(client.get_partitions_ps_with_auth(args[0],args[1],eval(args[2]),eval(args[3]),args[4],eval(args[5]),))

elif cmd == 'get_partition_names_ps':
  if len(args) != 4:
    print 'get_partition_names_ps requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_partition_names_ps(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_partitions_by_filter':
  if len(args) != 4:
    print 'get_partitions_by_filter requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_partitions_by_filter(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'get_partitions_by_names':
  if len(args) != 3:
    print 'get_partitions_by_names requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_partitions_by_names(args[0],args[1],eval(args[2]),))

elif cmd == 'alter_partition':
  if len(args) != 3:
    print 'alter_partition requires 3 args'
    sys.exit(1)
  pp.pprint(client.alter_partition(args[0],args[1],eval(args[2]),))

elif cmd == 'alter_partitions':
  if len(args) != 3:
    print 'alter_partitions requires 3 args'
    sys.exit(1)
  pp.pprint(client.alter_partitions(args[0],args[1],eval(args[2]),))

elif cmd == 'alter_partition_with_environment_context':
  if len(args) != 4:
    print 'alter_partition_with_environment_context requires 4 args'
    sys.exit(1)
  pp.pprint(client.alter_partition_with_environment_context(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'rename_partition':
  if len(args) != 4:
    print 'rename_partition requires 4 args'
    sys.exit(1)
  pp.pprint(client.rename_partition(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_config_value':
  if len(args) != 2:
    print 'get_config_value requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_config_value(args[0],args[1],))

elif cmd == 'partition_name_to_vals':
  if len(args) != 1:
    print 'partition_name_to_vals requires 1 args'
    sys.exit(1)
  pp.pprint(client.partition_name_to_vals(args[0],))

elif cmd == 'partition_name_to_spec':
  if len(args) != 1:
    print 'partition_name_to_spec requires 1 args'
    sys.exit(1)
  pp.pprint(client.partition_name_to_spec(args[0],))

elif cmd == 'markPartitionForEvent':
  if len(args) != 4:
    print 'markPartitionForEvent requires 4 args'
    sys.exit(1)
  pp.pprint(client.markPartitionForEvent(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'isPartitionMarkedForEvent':
  if len(args) != 4:
    print 'isPartitionMarkedForEvent requires 4 args'
    sys.exit(1)
  pp.pprint(client.isPartitionMarkedForEvent(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'add_index':
  if len(args) != 2:
    print 'add_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_index(eval(args[0]),eval(args[1]),))

elif cmd == 'alter_index':
  if len(args) != 4:
    print 'alter_index requires 4 args'
    sys.exit(1)
  pp.pprint(client.alter_index(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'drop_index_by_name':
  if len(args) != 4:
    print 'drop_index_by_name requires 4 args'
    sys.exit(1)
  pp.pprint(client.drop_index_by_name(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'get_index_by_name':
  if len(args) != 3:
    print 'get_index_by_name requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_index_by_name(args[0],args[1],args[2],))

elif cmd == 'get_indexes':
  if len(args) != 3:
    print 'get_indexes requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_indexes(args[0],args[1],eval(args[2]),))

elif cmd == 'get_index_names':
  if len(args) != 3:
    print 'get_index_names requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_index_names(args[0],args[1],eval(args[2]),))

elif cmd == 'update_table_column_statistics':
  if len(args) != 1:
    print 'update_table_column_statistics requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_table_column_statistics(eval(args[0]),))

elif cmd == 'update_partition_column_statistics':
  if len(args) != 1:
    print 'update_partition_column_statistics requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_partition_column_statistics(eval(args[0]),))

elif cmd == 'get_table_column_statistics':
  if len(args) != 3:
    print 'get_table_column_statistics requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_table_column_statistics(args[0],args[1],args[2],))

elif cmd == 'get_partition_column_statistics':
  if len(args) != 4:
    print 'get_partition_column_statistics requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_partition_column_statistics(args[0],args[1],args[2],args[3],))

elif cmd == 'delete_partition_column_statistics':
  if len(args) != 4:
    print 'delete_partition_column_statistics requires 4 args'
    sys.exit(1)
  pp.pprint(client.delete_partition_column_statistics(args[0],args[1],args[2],args[3],))

elif cmd == 'delete_table_column_statistics':
  if len(args) != 3:
    print 'delete_table_column_statistics requires 3 args'
    sys.exit(1)
  pp.pprint(client.delete_table_column_statistics(args[0],args[1],args[2],))

elif cmd == 'create_user':
  if len(args) != 1:
    print 'create_user requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_user(eval(args[0]),))

elif cmd == 'drop_user':
  if len(args) != 1:
    print 'drop_user requires 1 args'
    sys.exit(1)
  pp.pprint(client.drop_user(args[0],))

elif cmd == 'modify_user':
  if len(args) != 1:
    print 'modify_user requires 1 args'
    sys.exit(1)
  pp.pprint(client.modify_user(eval(args[0]),))

elif cmd == 'list_users_names':
  if len(args) != 0:
    print 'list_users_names requires 0 args'
    sys.exit(1)
  pp.pprint(client.list_users_names())

elif cmd == 'list_users':
  if len(args) != 1:
    print 'list_users requires 1 args'
    sys.exit(1)
  pp.pprint(client.list_users(eval(args[0]),))

elif cmd == 'authentication':
  if len(args) != 2:
    print 'authentication requires 2 args'
    sys.exit(1)
  pp.pprint(client.authentication(args[0],args[1],))

elif cmd == 'user_authority_check':
  if len(args) != 3:
    print 'user_authority_check requires 3 args'
    sys.exit(1)
  pp.pprint(client.user_authority_check(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'create_role':
  if len(args) != 1:
    print 'create_role requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_role(eval(args[0]),))

elif cmd == 'drop_role':
  if len(args) != 1:
    print 'drop_role requires 1 args'
    sys.exit(1)
  pp.pprint(client.drop_role(args[0],))

elif cmd == 'get_role_names':
  if len(args) != 0:
    print 'get_role_names requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_role_names())

elif cmd == 'grant_role':
  if len(args) != 6:
    print 'grant_role requires 6 args'
    sys.exit(1)
  pp.pprint(client.grant_role(args[0],args[1],eval(args[2]),args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'revoke_role':
  if len(args) != 3:
    print 'revoke_role requires 3 args'
    sys.exit(1)
  pp.pprint(client.revoke_role(args[0],args[1],eval(args[2]),))

elif cmd == 'list_roles':
  if len(args) != 2:
    print 'list_roles requires 2 args'
    sys.exit(1)
  pp.pprint(client.list_roles(args[0],eval(args[1]),))

elif cmd == 'get_privilege_set':
  if len(args) != 3:
    print 'get_privilege_set requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_privilege_set(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'list_privileges':
  if len(args) != 3:
    print 'list_privileges requires 3 args'
    sys.exit(1)
  pp.pprint(client.list_privileges(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'grant_privileges':
  if len(args) != 1:
    print 'grant_privileges requires 1 args'
    sys.exit(1)
  pp.pprint(client.grant_privileges(eval(args[0]),))

elif cmd == 'revoke_privileges':
  if len(args) != 1:
    print 'revoke_privileges requires 1 args'
    sys.exit(1)
  pp.pprint(client.revoke_privileges(eval(args[0]),))

elif cmd == 'set_ugi':
  if len(args) != 2:
    print 'set_ugi requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_ugi(args[0],eval(args[1]),))

elif cmd == 'get_delegation_token':
  if len(args) != 2:
    print 'get_delegation_token requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_delegation_token(args[0],args[1],))

elif cmd == 'renew_delegation_token':
  if len(args) != 1:
    print 'renew_delegation_token requires 1 args'
    sys.exit(1)
  pp.pprint(client.renew_delegation_token(args[0],))

elif cmd == 'cancel_delegation_token':
  if len(args) != 1:
    print 'cancel_delegation_token requires 1 args'
    sys.exit(1)
  pp.pprint(client.cancel_delegation_token(args[0],))

elif cmd == 'create_file':
  if len(args) != 5:
    print 'create_file requires 5 args'
    sys.exit(1)
  pp.pprint(client.create_file(args[0],eval(args[1]),args[2],args[3],eval(args[4]),))

elif cmd == 'create_file_by_policy':
  if len(args) != 5:
    print 'create_file_by_policy requires 5 args'
    sys.exit(1)
  pp.pprint(client.create_file_by_policy(eval(args[0]),eval(args[1]),args[2],args[3],eval(args[4]),))

elif cmd == 'set_file_repnr':
  if len(args) != 2:
    print 'set_file_repnr requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_file_repnr(eval(args[0]),eval(args[1]),))

elif cmd == 'reopen_file':
  if len(args) != 1:
    print 'reopen_file requires 1 args'
    sys.exit(1)
  pp.pprint(client.reopen_file(eval(args[0]),))

elif cmd == 'close_file':
  if len(args) != 1:
    print 'close_file requires 1 args'
    sys.exit(1)
  pp.pprint(client.close_file(eval(args[0]),))

elif cmd == 'online_filelocation':
  if len(args) != 1:
    print 'online_filelocation requires 1 args'
    sys.exit(1)
  pp.pprint(client.online_filelocation(eval(args[0]),))

elif cmd == 'offline_filelocation':
  if len(args) != 1:
    print 'offline_filelocation requires 1 args'
    sys.exit(1)
  pp.pprint(client.offline_filelocation(eval(args[0]),))

elif cmd == 'set_loadstatus_bad':
  if len(args) != 1:
    print 'set_loadstatus_bad requires 1 args'
    sys.exit(1)
  pp.pprint(client.set_loadstatus_bad(eval(args[0]),))

elif cmd == 'toggle_safemode':
  if len(args) != 0:
    print 'toggle_safemode requires 0 args'
    sys.exit(1)
  pp.pprint(client.toggle_safemode())

elif cmd == 'get_file_by_id':
  if len(args) != 1:
    print 'get_file_by_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_file_by_id(eval(args[0]),))

elif cmd == 'del_fileLocation':
  if len(args) != 1:
    print 'del_fileLocation requires 1 args'
    sys.exit(1)
  pp.pprint(client.del_fileLocation(eval(args[0]),))

elif cmd == 'get_file_by_name':
  if len(args) != 3:
    print 'get_file_by_name requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_file_by_name(args[0],args[1],args[2],))

elif cmd == 'rm_file_logical':
  if len(args) != 1:
    print 'rm_file_logical requires 1 args'
    sys.exit(1)
  pp.pprint(client.rm_file_logical(eval(args[0]),))

elif cmd == 'restore_file':
  if len(args) != 1:
    print 'restore_file requires 1 args'
    sys.exit(1)
  pp.pprint(client.restore_file(eval(args[0]),))

elif cmd == 'rm_file_physical':
  if len(args) != 1:
    print 'rm_file_physical requires 1 args'
    sys.exit(1)
  pp.pprint(client.rm_file_physical(eval(args[0]),))

elif cmd == 'get_node':
  if len(args) != 1:
    print 'get_node requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_node(args[0],))

elif cmd == 'add_node':
  if len(args) != 2:
    print 'add_node requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_node(args[0],eval(args[1]),))

elif cmd == 'del_node':
  if len(args) != 1:
    print 'del_node requires 1 args'
    sys.exit(1)
  pp.pprint(client.del_node(args[0],))

elif cmd == 'create_device':
  if len(args) != 3:
    print 'create_device requires 3 args'
    sys.exit(1)
  pp.pprint(client.create_device(args[0],eval(args[1]),args[2],))

elif cmd == 'get_device':
  if len(args) != 1:
    print 'get_device requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_device(args[0],))

elif cmd == 'del_device':
  if len(args) != 1:
    print 'del_device requires 1 args'
    sys.exit(1)
  pp.pprint(client.del_device(args[0],))

elif cmd == 'modify_device':
  if len(args) != 2:
    print 'modify_device requires 2 args'
    sys.exit(1)
  pp.pprint(client.modify_device(eval(args[0]),eval(args[1]),))

elif cmd == 'list_device':
  if len(args) != 0:
    print 'list_device requires 0 args'
    sys.exit(1)
  pp.pprint(client.list_device())

elif cmd == 'alter_node':
  if len(args) != 3:
    print 'alter_node requires 3 args'
    sys.exit(1)
  pp.pprint(client.alter_node(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'find_best_nodes':
  if len(args) != 1:
    print 'find_best_nodes requires 1 args'
    sys.exit(1)
  pp.pprint(client.find_best_nodes(eval(args[0]),))

elif cmd == 'find_best_nodes_in_groups':
  if len(args) != 4:
    print 'find_best_nodes_in_groups requires 4 args'
    sys.exit(1)
  pp.pprint(client.find_best_nodes_in_groups(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_all_nodes':
  if len(args) != 0:
    print 'get_all_nodes requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_all_nodes())

elif cmd == 'getDMStatus':
  if len(args) != 0:
    print 'getDMStatus requires 0 args'
    sys.exit(1)
  pp.pprint(client.getDMStatus())

elif cmd == 'getNodeInfo':
  if len(args) != 0:
    print 'getNodeInfo requires 0 args'
    sys.exit(1)
  pp.pprint(client.getNodeInfo())

elif cmd == 'migrate_in':
  if len(args) != 6:
    print 'migrate_in requires 6 args'
    sys.exit(1)
  pp.pprint(client.migrate_in(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'migrate_stage1':
  if len(args) != 4:
    print 'migrate_stage1 requires 4 args'
    sys.exit(1)
  pp.pprint(client.migrate_stage1(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'migrate_stage2':
  if len(args) != 8:
    print 'migrate_stage2 requires 8 args'
    sys.exit(1)
  pp.pprint(client.migrate_stage2(args[0],args[1],eval(args[2]),args[3],args[4],args[5],args[6],args[7],))

elif cmd == 'migrate2_in':
  if len(args) != 6:
    print 'migrate2_in requires 6 args'
    sys.exit(1)
  pp.pprint(client.migrate2_in(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'migrate2_stage1':
  if len(args) != 4:
    print 'migrate2_stage1 requires 4 args'
    sys.exit(1)
  pp.pprint(client.migrate2_stage1(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'migrate2_stage2':
  if len(args) != 6:
    print 'migrate2_stage2 requires 6 args'
    sys.exit(1)
  pp.pprint(client.migrate2_stage2(args[0],args[1],eval(args[2]),args[3],args[4],args[5],))

elif cmd == 'getMP':
  if len(args) != 2:
    print 'getMP requires 2 args'
    sys.exit(1)
  pp.pprint(client.getMP(args[0],args[1],))

elif cmd == 'getSessionId':
  if len(args) != 0:
    print 'getSessionId requires 0 args'
    sys.exit(1)
  pp.pprint(client.getSessionId())

elif cmd == 'createSchema':
  if len(args) != 1:
    print 'createSchema requires 1 args'
    sys.exit(1)
  pp.pprint(client.createSchema(eval(args[0]),))

elif cmd == 'modifySchema':
  if len(args) != 2:
    print 'modifySchema requires 2 args'
    sys.exit(1)
  pp.pprint(client.modifySchema(args[0],eval(args[1]),))

elif cmd == 'deleteSchema':
  if len(args) != 1:
    print 'deleteSchema requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteSchema(args[0],))

elif cmd == 'listSchemas':
  if len(args) != 0:
    print 'listSchemas requires 0 args'
    sys.exit(1)
  pp.pprint(client.listSchemas())

elif cmd == 'getSchemaByName':
  if len(args) != 1:
    print 'getSchemaByName requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSchemaByName(args[0],))

elif cmd == 'getTableNodeGroups':
  if len(args) != 2:
    print 'getTableNodeGroups requires 2 args'
    sys.exit(1)
  pp.pprint(client.getTableNodeGroups(args[0],args[1],))

elif cmd == 'getTableNodeFiles':
  if len(args) != 3:
    print 'getTableNodeFiles requires 3 args'
    sys.exit(1)
  pp.pprint(client.getTableNodeFiles(args[0],args[1],args[2],))

elif cmd == 'listTableFiles':
  if len(args) != 4:
    print 'listTableFiles requires 4 args'
    sys.exit(1)
  pp.pprint(client.listTableFiles(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'listFilesByDigest':
  if len(args) != 1:
    print 'listFilesByDigest requires 1 args'
    sys.exit(1)
  pp.pprint(client.listFilesByDigest(args[0],))

elif cmd == 'filterTableFiles':
  if len(args) != 3:
    print 'filterTableFiles requires 3 args'
    sys.exit(1)
  pp.pprint(client.filterTableFiles(args[0],args[1],eval(args[2]),))

elif cmd == 'truncTableFiles':
  if len(args) != 2:
    print 'truncTableFiles requires 2 args'
    sys.exit(1)
  pp.pprint(client.truncTableFiles(args[0],args[1],))

elif cmd == 'addNodeGroup':
  if len(args) != 1:
    print 'addNodeGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.addNodeGroup(eval(args[0]),))

elif cmd == 'modifyNodeGroup':
  if len(args) != 2:
    print 'modifyNodeGroup requires 2 args'
    sys.exit(1)
  pp.pprint(client.modifyNodeGroup(args[0],eval(args[1]),))

elif cmd == 'deleteNodeGroup':
  if len(args) != 1:
    print 'deleteNodeGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteNodeGroup(eval(args[0]),))

elif cmd == 'listNodeGroups':
  if len(args) != 0:
    print 'listNodeGroups requires 0 args'
    sys.exit(1)
  pp.pprint(client.listNodeGroups())

elif cmd == 'listDBNodeGroups':
  if len(args) != 1:
    print 'listDBNodeGroups requires 1 args'
    sys.exit(1)
  pp.pprint(client.listDBNodeGroups(args[0],))

elif cmd == 'listNodeGroupByNames':
  if len(args) != 1:
    print 'listNodeGroupByNames requires 1 args'
    sys.exit(1)
  pp.pprint(client.listNodeGroupByNames(eval(args[0]),))

elif cmd == 'addTableNodeDist':
  if len(args) != 3:
    print 'addTableNodeDist requires 3 args'
    sys.exit(1)
  pp.pprint(client.addTableNodeDist(args[0],args[1],eval(args[2]),))

elif cmd == 'deleteTableNodeDist':
  if len(args) != 3:
    print 'deleteTableNodeDist requires 3 args'
    sys.exit(1)
  pp.pprint(client.deleteTableNodeDist(args[0],args[1],eval(args[2]),))

elif cmd == 'listTableNodeDists':
  if len(args) != 2:
    print 'listTableNodeDists requires 2 args'
    sys.exit(1)
  pp.pprint(client.listTableNodeDists(args[0],args[1],))

elif cmd == 'assiginSchematoDB':
  if len(args) != 5:
    print 'assiginSchematoDB requires 5 args'
    sys.exit(1)
  pp.pprint(client.assiginSchematoDB(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'statFileSystem':
  if len(args) != 2:
    print 'statFileSystem requires 2 args'
    sys.exit(1)
  pp.pprint(client.statFileSystem(eval(args[0]),eval(args[1]),))

elif cmd == 'getMaxFid':
  if len(args) != 0:
    print 'getMaxFid requires 0 args'
    sys.exit(1)
  pp.pprint(client.getMaxFid())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
